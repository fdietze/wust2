wust.slack {
    wust {
        host = ""
        port = ""
        user = "wust-slack"
        password = "wust-slack"
    }
    server {
        host = "localhost"
        port = 8080
        webhookPath = "slackEvents"// ${WUST_SLACK_HOOK_PATH}
        //TODO: no hardcode
        allowedOrigins = [
            "http://localhost:12345",
            "http://slack.localhost:12345",
            "https://woost.space",
            "https://*.ngrok.io"
        ]
    }
    oauth {
        clientId = ""
        clientSecret = ""
        siteUri = "https://slack.com/"
        redirectUri = "https://bdf79569.ngrok.io/"
        tokenUrl = "/api/oauth.access"
    }
    postgres {
        host = ""
        port = 5432
        database = ""
        user = ""
        password = ""
        // settings explanation: https://github.com/mauricio/postgresql-async/blob/cc587698bb41956d691b6e625313ef81fc0417d1/db-async-common/src/main/scala/com/github/mauricio/async/db/pool/PoolConfiguration.scala
        poolMaxQueueSize = 999999 // max pending query queue size
        poolMaxObjects = 90 // max connection count, should be limited to /var/lib/postgresql/data/postgresql.conf "max_connections" (currently 100) in docker
        poolMaxIdle = 999999999 // number of milliseconds for which the objects are going to be kept as idle (not in use by clients of the pool)
        poolValidationInterval = 10000
    }
    slack {
        token = ""
        botId = ""
        signingSecret = ""
    }
}
