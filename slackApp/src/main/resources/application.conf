wust.slack {
    wust {
        host = ${WUST_HOSTNAME}
        port = ${WUST_CORE_PORT}
        user = ${WUST_USER}
        password = ${WUST_PASSWORD}
    }
    server {
        host = ${WUST_HOSTNAME}
        port = 8080
        port = ${?WUST_SLACK_PORT}
        webhookPath = "slackEvents"// ${WUST_SLACK_HOOK_PATH}
        //TODO: no hardcode
        allowedOrigins = [
            "http://localhost:12345",
            "https://woost.space"
        ]
    }
    oauth {
        //accessToken = null
        //accessToken = ${?WUST_SLACK_TOKEN}
        authPath = "slackAuth"// ${WUST_SLACK_PATH}
        clientId = "clientId" //${WUST_SLACK_ID}
        clientSecret = "clientSecret" //${WUST_SLACK_SECRET}
        siteUri = "slack-url"
        authorizeUrl = null
        tokenUrl = null
    }
    postgres {
        host = ${SLACK_POSTGRES_HOSTNAME}
        port = 5432
        port = ${?SLACK_POSTGRES_PORT_CORE}
        database = ${SLACK_POSTGRES_DB}
        user = ${SLACK_POSTGRES_USER}
        password = ${SLACK_POSTGRES_PASSWORD}
        // settings explanation: https://github.com/mauricio/postgresql-async/blob/cc587698bb41956d691b6e625313ef81fc0417d1/db-async-common/src/main/scala/com/github/mauricio/async/db/pool/PoolConfiguration.scala
        poolMaxQueueSize = 999999 // max pending query queue size
        poolMaxObjects = 90 // max connection count, should be limited to /var/lib/postgresql/data/postgresql.conf "max_connections" (currently 100) in docker
        poolMaxIdle = 999999999 // number of milliseconds for which the objects are going to be kept as idle (not in use by clients of the pool)
        poolValidationInterval = 10000
    }
    slack {
        token = ${SLACK_WUST_APP_TOKEN}
    }
}
