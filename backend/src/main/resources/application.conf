wust {
    server {
        port = 8080
    }

    auth {
        enableImplicit = true
        tokenLifetime = 365 d
        secret = ${WUST_AUTH_SECRET}
    }

    email {
        fromAddress = ${?WUST_EMAIL_ADDRESS}
        smtp {
            username = ${?WUST_SMTP_USER}
            password = ${?WUST_SMTP_PASS}
            endpoint = ${?WUST_SMTP_ENDPOINT}
        }
    }

    db {
        host = ${POSTGRES_HOSTNAME}
        port = 5432
        port = ${?POSTGRES_PORT}
        database = ${POSTGRES_DB}
        user = ${POSTGRES_USER}
        password = ${POSTGRES_PASSWORD}
        // settings explanation: https://github.com/mauricio/postgresql-async/blob/cc587698bb41956d691b6e625313ef81fc0417d1/db-async-common/src/main/scala/com/github/mauricio/async/db/pool/PoolConfiguration.scala
        poolMaxQueueSize = 999999 // max pending query queue size
        poolMaxObjects = 90 // max connection count, should be limited to /var/lib/postgresql/data/postgresql.conf "max_connections" (currently 100) in docker
        poolMaxIdle = 999999999 // number of milliseconds for which the objects are going to be kept as idle (not in use by clients of the pool)
        poolValidationInterval = 10000
    }
}

akka {
    log-dead-letters = 10
    log-dead-letters-during-shutdown = on
    //event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    //loglevel = "INFO"
    //logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

    http {
        // corresponds to nginx read timeout
        server.idle-timeout = 120 s
    }
}
