name := "wust"

enablePlugins(GitVersioning)
git.useGitDescribe := true
git.baseVersion := "0.1.0"
git.uncommittedSignifier := None // TODO: appends SNAPSHOT to version, but is always(!) active.

scalaVersion in ThisBuild := "2.12.3"

lazy val commonSettings = Seq(
  resolvers ++= (
    ("Sonatype OSS Snapshots" at "https://oss.sonatype.org/content/repositories/snapshots") ::
    Resolver.jcenterRepo ::
    Resolver.bintrayRepo("daxten", "maven") :: // for Daxten/autowire
    Nil
  ),

  addCompilerPlugin("org.scalameta" % "paradise" % "3.0.0-M10" cross CrossVersion.full),
  scalacOptions += "-Xplugin-require:macroparadise",
  scalacOptions in (Compile, console) := Seq(), // macroparadise plugin doesn't work in repl yet. https://github.com/scalameta/paradise/issues/10
  //exclude source files generated by scala meta: https://github.com/scalameta/paradise/issues/56
  coverageExcludedFiles := "<macro>",

  libraryDependencies ++= (
    "org.scalameta" %%% "scalameta" % "1.8.0" % "provided" ::
    "org.scalatest" %%% "scalatest" % scalaTestVersion % "test" ::
    "com.outr" %%% "scribe" % "1.4.5" ::
    Nil
  ),

  // do not run tests in assembly command
  test in assembly := {},

  // watch managed library dependencies (only works with scala 2.11 currently)
  watchSources ++= (managedClasspath in Compile).map(_.files).value,

  scalacOptions ++=
    "-encoding" :: "UTF-8" ::
    "-unchecked" ::
    "-deprecation" ::
    "-explaintypes" ::
    "-feature" ::
    "-language:_" ::
    "-Xlint:-unused,_" ::
    "-Ywarn-unused:-imports,-params,_" ::
    Nil
// To enable wartremover in all projects: https://github.com/wartremover/wartremover/issues/283#issuecomment-332927623
// wartremoverErrors ++= (
//   // http://www.wartremover.org/doc/warts.html
//   // Wart.Equals :: // TODO: rather have a compiler plugin to transform == to ===
//   // Wart.FinalCaseClass :: //TODO: rather have a compiler plugin to add "final"
//   // Wart.LeakingSealed ::
//   ContribWart.SomeApply :: //TODO: rather have a compiler plugin to transform Some(..) to Option(..) ?
//   // Wart.OldTime ::
//   // Wart.AsInstanceOf ::
//   Wart.Null ::
//   Nil
// ),
// wartremoverExcluded ++= (
//   //TODO: these files are ignored because scribe uses Some
//   baseDirectory.value / "src" / "main" / "scala" / "Dispatcher.scala" ::
//   baseDirectory.value / "src" / "main" / "scala" / "Server.scala" ::
//   Nil
// )
)

lazy val isCI = sys.env.get("CI").isDefined // set by travis

lazy val root = project.in(file("."))
  .aggregate(apiJS, apiJVM, database, backend, frameworkJS, frameworkJVM, frontend, graphJS, graphJVM, utilJS, utilJVM, systemTest, nginx, dbMigration, slackApp)
  .settings(
    publish := {},
    publishLocal := {},

    addCommandAlias("clean", "; root/clean; assets/clean; workbench/clean"),

    addCommandAlias("devwatch", "~; backend/re-start; workbench/assets"),
    addCommandAlias("dev", "; project root; devwatch"),
    addCommandAlias("devfwatch", "~workbench/assets"),
    addCommandAlias("devf", "; project root; backend/re-start; devfwatch"),

    addCommandAlias("testJS", "; utilJS/test; graphJS/test; frameworkJS/test; apiJS/test; frontend/test"),
    addCommandAlias("testJSOpt", "; set scalaJSStage in Global := FullOptStage; testJS"),
    addCommandAlias("testJVM", "; utilJVM/test; graphJVM/test; frameworkJVM/test; apiJVM/test; database/test; backend/test; slackApp/test"),

    watchSources ++= (watchSources in workbench).value
  )

val akkaVersion = "2.4.20"
val akkaHttpVersion = "10.0.10"
val circeVersion = "0.8.0"
val specs2Version = "3.9.5"
val scalaTestVersion = "3.0.4"
val mockitoVersion = "2.10.0"
val scalazVersion = "7.2.13"
val boopickleVersion = "1.2.6"
val quillVersion = "1.4.0"

lazy val util = crossProject
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= (
      "com.github.pureconfig" %% "pureconfig" % "0.8.0" ::
      "com.lihaoyi" %%% "sourcecode" % "0.1.4" ::
      Nil
    )
  )
  .jsSettings(
    libraryDependencies ++= (
      "com.lihaoyi" %%% "scalatags" % "0.6.5" ::
      Nil
    )
  )
lazy val utilJS = util.js
lazy val utilJVM = util.jvm

lazy val framework = crossProject
  .dependsOn(util)
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= (
      "de.daxten" %%% "autowire" % "0.3.1" ::
      "io.suzaku" %%% "boopickle" % boopickleVersion ::
      Nil
    )
  )
  .jvmSettings(
    libraryDependencies ++= (
      "com.typesafe.akka" %% "akka-http" % akkaHttpVersion ::
      "com.typesafe.akka" %% "akka-actor" % akkaVersion ::
      "com.typesafe.akka" %% "akka-testkit" % akkaVersion % "test" ::
      Nil
    )
  )
  .jsSettings(
    libraryDependencies ++= (
      "org.scala-js" %%% "scalajs-dom" % "0.9.3" ::
      Nil
    )
  )

lazy val frameworkJS = framework.js
lazy val frameworkJVM = framework.jvm

lazy val ids = crossProject
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= (
      "org.scalaz" %%% "scalaz-core" % scalazVersion ::
      "io.suzaku" %%% "boopickle" % boopickleVersion ::
      "io.circe" %%% "circe-core" % circeVersion ::
      "io.circe" %%% "circe-generic" % circeVersion ::
      "io.circe" %%% "circe-parser" % circeVersion ::
      Nil
    )
  )
lazy val idsJS = ids.js
lazy val idsJVM = ids.jvm

lazy val graph = crossProject
  .settings(commonSettings)
  .dependsOn(ids)
  .settings(
    libraryDependencies ++= (
      "com.github.cornerman" %% "derive" % "0.1.0-SNAPSHOT" ::
      Nil
    )
  )
  .dependsOn(util)
lazy val graphJS = graph.js
lazy val graphJVM = graph.jvm

lazy val api = crossProject.crossType(CrossType.Pure)
  .dependsOn(graph)
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= (
      Nil
    )
  )
lazy val apiJS = api.js
lazy val apiJVM = api.jvm

lazy val database = project
  .settings(commonSettings)
  .configs(IntegrationTest)
  .settings(Defaults.itSettings)
  .dependsOn(idsJVM, utilJVM)
  .settings(
    libraryDependencies ++=
      "io.getquill" %% "quill-async-postgres" % quillVersion ::
      "org.scalatest" %%% "scalatest" % scalaTestVersion % "test,it" ::
      Nil
  // parallelExecution in IntegrationTest := false
  )

lazy val backend = project
  .settings(commonSettings)
  .dependsOn(frameworkJVM, apiJVM, database)
  .configs(IntegrationTest)
  .settings(Defaults.itSettings)
  .settings(
    libraryDependencies ++=
      "org.typelevel" %% "cats-core" % "1.0.0-MF" ::
      "com.roundeights" %% "hasher" % "1.2.0" ::
      "org.mindrot" % "jbcrypt" % "0.4" ::
      "com.pauldijou" %% "jwt-circe" % "0.14.0" ::
      "javax.mail" % "javax.mail-api" % "1.6.0" ::
      "com.sun.mail" % "javax.mail" % "1.6.0" ::
      "com.roundeights" %% "hasher" % "1.2.0" ::
      "org.mindrot" % "jbcrypt" % "0.4" ::
      "com.github.cornerman" %% "derive" % "0.1.0-SNAPSHOT" ::
      "com.github.cornerman" %% "delegert" % "0.1.0-SNAPSHOT" ::
      "org.mockito" % "mockito-core" % mockitoVersion % "test" ::
      "org.scalatest" %%% "scalatest" % scalaTestVersion % "test,it" ::
      Nil
  )

lazy val frontend = project
  .enablePlugins(ScalaJSPlugin, ScalaJSBundlerPlugin)
  .dependsOn(frameworkJS, apiJS, utilJS)
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= (
      ("com.timushev" %%% "scalatags-rx" % "0.3.0" excludeAll ExclusionRule("com.lihaoyi")) ::
      "com.lihaoyi" %%% "scalatags" % "0.6.5" ::
      "com.github.fdietze" %%% "scalarx" % "0.3.3-SNAPSHOT" ::
      "com.github.fdietze" %%% "vectory" % "0.1.0" ::
      "com.github.fdietze" %%% "scala-js-d3v4" % "0.1.0-SNAPSHOT" ::
      "com.github.cornerman" %% "derive" % "0.1.0-SNAPSHOT" ::
      "com.github.cornerman" %% "delegert" % "0.1.0-SNAPSHOT" ::
      Nil
    ),
    requiresDOM := true, // still required because of bundler: https://gitter.im/scala-js/scala-js?at=59b55f12177fb9fe7ea2beff
    // jsEnv := new org.scalajs.jsenv.jsdomnodejs.JSDOMNodeJSEnv(), // runs scalajs tests with node + jsdom. Requires jsdom to be installed

    scalaJSUseMainModuleInitializer := true,
    // scalaJSOptimizerOptions in fastOptJS ~= { _.withDisableOptimizer(true) }, // disable optimizations for better debugging experience
    useYarn := true, // instead of npm
    //TODO: production needs to be bundled?
    // webpackBundlingMode := BundlingMode.LibraryOnly(), // https://scalacenter.github.io/scalajs-bundler/cookbook.html#performance
    //TODO: scalaJSLinkerConfig instead of emitSOurceMaps, scalajsOptimizer,...
    emitSourceMaps := false,
    emitSourceMaps in fullOptJS := false,
    npmDependencies in Compile ++= (
      "cuid" -> "1.3.8" ::
      Nil
    ),
    npmDevDependencies in Compile ++= (
      "compression-webpack-plugin" -> "0.3.1" ::
      "brotli-webpack-plugin" -> "0.2.0" ::
      "webpack-closure-compiler" -> "2.1.4" ::
      Nil
    ),
    webpackConfigFile in fullOptJS := Some(baseDirectory.value / "scalajsbundler.config.js") // renamed due to https://github.com/scalacenter/scalajs-bundler/issues/123
  )

lazy val slackApp = project
  .settings(commonSettings)
  .dependsOn(frameworkJVM, apiJVM, utilJVM)
  .settings(
    libraryDependencies ++=
      "cool.graph" % "cuid-java" % "0.1.1" ::
      "com.github.cornerman" %% "derive" % "0.1.0-SNAPSHOT" ::
      "com.github.gilbertw1" %% "slack-scala-client" % "0.2.1" ::
      Nil
  )

lazy val DevWorkbenchPlugins = if (isCI) Seq.empty else Seq(WorkbenchPlugin)
lazy val DevWorkbenchSettings = if (isCI) Seq.empty else Seq(
  refreshBrowsers := (refreshBrowsers.triggeredBy(WebKeys.assets in Assets)).value //TODO: do not refresh if compilation failed
)

lazy val workbench = project
  .enablePlugins(SbtWeb, ScalaJSWeb, WebScalaJSBundlerPlugin)
  .enablePlugins(DevWorkbenchPlugins: _*)
  .settings(DevWorkbenchSettings: _*)
  .settings(
    // we have a symbolic link from src -> ../frontend/src
    // to correct the paths in the source-map
    scalaSource := baseDirectory.value / "src-not-found",

    devCommands in scalaJSPipeline ++= Seq("assets"), // build assets in dev mode
    unmanagedResourceDirectories in Assets += (baseDirectory in assets).value / "public", // include other assets

    scalaJSProjects := Seq(frontend),
    pipelineStages in Assets := Seq(scalaJSPipeline),

    watchSources += baseDirectory.value / "index.html",
    watchSources ++= (watchSources in assets).value
  )

lazy val assets = project
  .enablePlugins(SbtWeb, ScalaJSWeb, WebScalaJSBundlerPlugin)
  .settings(
    resourceGenerators in Assets += Def.task {
      val file = (resourceManaged in Assets).value / "version.txt"
      IO.write(file, version.value)
      Seq(file)
    },
    unmanagedResourceDirectories in Assets += baseDirectory.value / "public",
    scalaJSProjects := Seq(frontend),
    npmAssets ++= {
      // without dependsOn, the file list is generated before webpack does its thing.
      // Which would mean that generated files by webpack do not land in the pipeline.
      val assets = ((npmUpdate in Compile in frontend).dependsOn(webpack in fullOptJS in Compile in frontend).value ** "*.gz") +++ ((npmUpdate in Compile in frontend).dependsOn(webpack in fullOptJS in Compile in frontend).value ** "*.br")
      val nodeModules = (npmUpdate in (frontend, Compile)).value
      assets.pair(relativeTo(nodeModules))
    },
    pipelineStages in Assets := Seq(scalaJSPipeline)
  //TODO: minify html
  )

lazy val systemTest = project
  .configs(IntegrationTest)
  .settings(Defaults.itSettings)
  .settings(commonSettings)
  .settings(
    libraryDependencies ++=
      "com.typesafe.akka" %% "akka-http" % akkaHttpVersion % "it" ::
      "com.typesafe.akka" %% "akka-actor" % akkaVersion % "it" ::
      "org.specs2" %% "specs2-core" % specs2Version % "it" ::
      "org.seleniumhq.selenium" % "selenium-java" % "3.3.1" % "it" ::
      Nil,
    scalacOptions in Test ++= Seq("-Yrangepos") // specs2
  )

lazy val nginx = project
lazy val dbMigration = project
