name := "wust"

// docker versions do not allow '+'
version in ThisBuild ~= (_.replace('+', '-'))
 dynver in ThisBuild ~= (_.replace('+', '-'))

lazy val isCI = sys.env.get("CI").isDefined // set by travis

scalaVersion in ThisBuild := "2.12.4"
val akkaVersion = "2.4.20"
val akkaHttpVersion = "10.0.11"
val circeVersion = "0.9.0-M3"
val specs2Version = "4.0.2"
val scalaTestVersion = "3.0.4"
val mockitoVersion = "2.11.0"
val scalazVersion = "7.2.13"
val boopickleVersion = "1.2.6"
val quillVersion = "2.3.1"
val outwatch = "io.github.outwatch" % "outwatch" % "411c8e1"
val dualityVersion =  "9dd5e01649"
val derive = "io.github.cornerman" % "derive" % "04166c6" % "provided"
val delegert = "io.github.cornerman" %% "delegert" % "b74ccf6" % "provided"


lazy val commonSettings = Seq(
  resolvers ++= (
    /* ("Sonatype OSS Snapshots" at "https://oss.sonatype.org/content/repositories/snapshots") :: */
    /* Resolver.jcenterRepo :: */
    Resolver.bintrayRepo("daxten", "maven") :: // for Daxten/autowire
    ("jitpack" at "https://jitpack.io") ::
    Nil
  ),

  addCompilerPlugin("org.scalameta" % "paradise" % "3.0.0-M11" cross CrossVersion.full),
  scalacOptions += "-Xplugin-require:macroparadise",

  // macroparadise plugin doesn't work in repl yet. https://github.com/scalameta/paradise/issues/10
  scalacOptions in (Compile, console) := Seq(),

  //exclude source files generated by scala meta: https://github.com/scalameta/paradise/issues/56
  coverageExcludedFiles := "<macro>",

  libraryDependencies ++= (
    "org.scalameta" %%% "scalameta" % "1.8.0" % "provided" ::
    "org.scalatest" %%% "scalatest" % scalaTestVersion % "test" ::
    "com.outr" %%% "scribe" % "1.4.5" :: // logging framework
    Nil
  ),

  // do not run tests in assembly command
  test in assembly := {},

  // watch managed library dependencies https://github.com/sbt/sbt/issues/2834
  watchSources ++= (managedClasspath in Compile).map(_.files).value,

  scalacOptions ++=
      // https://www.threatstack.com/blog/useful-scalac-options-for-better-scala-development-part-1/
      // https://tpolecat.github.io/2017/04/25/scalac-flags.html
      "-encoding" :: "UTF-8" ::
      "-unchecked" :: // Enable additional warnings where generated code depends on assumptions
      "-deprecation" ::
      "-explaintypes" :: // Explain type errors in more detail
      "-feature" ::
      "-language:_" ::
      "-Xfuture" ::
      "-Xlint" ::
      "-Yno-adapted-args" ::
      // "-Ywarn-dead-code" :: // does not work with js.native
      "-Ywarn-unused:-imports,-explicits,-implicits,_" ::
      "-Ywarn-extra-implicit" ::
      "-Ywarn-infer-any" ::
      "-Ywarn-nullary-override" ::
      "-Ywarn-nullary-unit" ::
      Nil
)

lazy val root = project.in(file("."))
  .aggregate(apiJS, apiJVM, database, backend, frameworkJS, frameworkJVM, frontend, graphJS, graphJVM, utilJS, utilJVM, systemTest, nginx, dbMigration, slackApp)
  .settings(
    publish := {},
    publishLocal := {},

    addCommandAlias("clean", "; root/clean; assets/clean"),

    addCommandAlias("dev", "; project root; compile; frontend/fastOptJS::startWebpackDevServer; devwatch; devstop; backend/reStop"),
    addCommandAlias("devwatch", "~; backend/reStart; frontend/fastOptJS; frontend/copyFastOptJS"),
    addCommandAlias("devstop", "frontend/fastOptJS::stopWebpackDevServer"),

    addCommandAlias("devf", "; project root; compile; backend/reStart; project frontend; fastOptJS::startWebpackDevServer; devfwatch; devstop; backend/reStop"),
    addCommandAlias("devfwatch", "~; fastOptJS; copyFastOptJS"),

    addCommandAlias("testJS", "; utilJS/test; graphJS/test; frameworkJS/test; apiJS/test; frontend/test"),
    addCommandAlias("testJSOpt", "; set scalaJSStage in Global := FullOptStage; testJS"),
    addCommandAlias("testJVM", "; utilJVM/test; graphJVM/test; frameworkJVM/test; apiJVM/test; database/test; backend/test; slackApp/test"),

    // Avoid watching files in root project
    // TODO: is there a simpler less error-prone way to write this?
    // watchSources := (watchSources in apiJS).value ++ (watchSources in database).value ++ (watchSources in frontend).value
    // watchSources := Seq(apiJS, apiJVM, database, backend, frameworkJS, frameworkJVM, frontend, graphJS, graphJVM, utilJS, utilJVM, systemTest, nginx, dbMigration, slackApp).flatMap(p => (watchSources in p).value)
    watchSources := (watchSources in apiJS).value ++ (watchSources in apiJVM).value ++ (watchSources in database).value ++ (watchSources in backend).value ++ (watchSources in frameworkJS).value ++ (watchSources in frameworkJVM).value ++ (watchSources in frontend).value ++ (watchSources in graphJS).value ++ (watchSources in graphJVM).value ++ (watchSources in utilJS).value ++ (watchSources in utilJVM).value ++ (watchSources in systemTest).value ++ (watchSources in nginx).value ++ (watchSources in dbMigration).value ++ (watchSources in slackApp).value
  )

lazy val util = crossProject
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= (
      "com.github.pureconfig" %% "pureconfig" % "0.8.0" ::
      "com.lihaoyi" %%% "sourcecode" % "0.1.4" ::
      Nil
    )
  )
  .jsSettings(
    libraryDependencies ++= (
      "com.github.fdietze" % "duality" % dualityVersion ::
      outwatch ::
      Nil
    )
  )
lazy val utilJS = util.js
lazy val utilJVM = util.jvm

lazy val framework = crossProject
  .dependsOn(util)
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= (
      "de.daxten" %%% "autowire" % "0.3.3" ::
      "io.suzaku" %%% "boopickle" % boopickleVersion ::
      Nil
    )
  )
  .jvmSettings(
    libraryDependencies ++= (
      "com.typesafe.akka" %% "akka-http" % akkaHttpVersion ::
      "com.typesafe.akka" %% "akka-actor" % akkaVersion ::
      "com.typesafe.akka" %% "akka-testkit" % akkaVersion % "test" ::
      Nil
    )
  )
  .jsSettings(
    libraryDependencies ++= (
      "org.scala-js" %%% "scalajs-dom" % "0.9.3" ::
      Nil
    )
  )

lazy val frameworkJS = framework.js
lazy val frameworkJVM = framework.jvm

lazy val ids = crossProject
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= (
      "io.github.cquiroz" %%% "scala-java-time" % "2.0.0-M12" ::
      "org.scalaz" %%% "scalaz-core" % scalazVersion ::
      "io.suzaku" %%% "boopickle" % boopickleVersion ::
      "io.circe" %%% "circe-core" % circeVersion ::
      "io.circe" %%% "circe-generic" % circeVersion ::
      "io.circe" %%% "circe-parser" % circeVersion ::
      Nil
    )
  )
lazy val idsJS = ids.js
lazy val idsJVM = ids.jvm

lazy val graph = crossProject
  .settings(commonSettings)
  .dependsOn(ids)
  .settings(
    libraryDependencies ++= (
      derive ::
      Nil
    )
  )
  .dependsOn(util)
lazy val graphJS = graph.js
lazy val graphJVM = graph.jvm

lazy val api = crossProject.crossType(CrossType.Pure)
  .dependsOn(graph)
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= (
      Nil
    )
  )
lazy val apiJS = api.js
lazy val apiJVM = api.jvm

lazy val database = project
  .settings(commonSettings)
  .configs(IntegrationTest)
  .settings(Defaults.itSettings)
  .dependsOn(idsJVM, utilJVM)
  .settings(
    libraryDependencies ++=
      "io.getquill" %% "quill-async-postgres" % quillVersion ::
      "org.scalatest" %%% "scalatest" % scalaTestVersion % "test,it" ::
      Nil
  // parallelExecution in IntegrationTest := false
  )

lazy val backend = project
  .settings(commonSettings)
  .dependsOn(frameworkJVM, apiJVM, database)
  .configs(IntegrationTest)
  .settings(Defaults.itSettings)
  .settings(
    libraryDependencies ++=
      "com.roundeights" %% "hasher" % "1.2.0" ::
      "org.mindrot" % "jbcrypt" % "0.4" ::
      "com.pauldijou" %% "jwt-circe" % "0.14.1" ::
      "javax.mail" % "javax.mail-api" % "1.6.0" ::
      "com.sun.mail" % "javax.mail" % "1.6.0" ::
      "com.roundeights" %% "hasher" % "1.2.0" ::
      "org.mindrot" % "jbcrypt" % "0.4" ::
      derive ::
      delegert ::
      "org.mockito" % "mockito-core" % mockitoVersion % "test" ::
      "org.scalatest" %%% "scalatest" % scalaTestVersion % "test,it" ::
      Nil,

    javaOptions in reStart += "-Xmx50m"
  )

lazy val copyFastOptJS = TaskKey[Unit]("copyFastOptJS", "Copy javascript files to target directory")

lazy val frontend = project
  .enablePlugins(ScalaJSPlugin, ScalaJSBundlerPlugin)
  .dependsOn(frameworkJS, apiJS, utilJS)
  .settings(commonSettings)
  .settings(
    libraryDependencies ++= (
      outwatch ::
      "com.github.fdietze" % "duality" % dualityVersion ::
      "com.github.fdietze" % "vectory" % "3232833" ::
      "com.github.fdietze" %% "scala-js-d3v4" % "579b9df" ::
      "com.github.julien-truffaut" %%  "monocle-macro" % "1.5.0-cats-M2" ::
      derive ::
      delegert ::
      Nil
    ),
    npmDependencies in Compile ++= (
      "cuid" -> "1.3.8" ::
      Nil
    ),

    scalacOptions += "-P:scalajs:sjsDefinedByDefault",
    requiresDOM := true, // still required by bundler: https://github.com/scalacenter/scalajs-bundler/issues/181
    scalaJSUseMainModuleInitializer := true,
    //TODO: scalaJSStage in Test := FullOptStage,

    // scalaJSOptimizerOptions in fastOptJS ~= { _.withDisableOptimizer(true) }, // disable optimizations for better debugging experience
    emitSourceMaps in fastOptJS := true, //TODO: scalaJSLinkerConfig instead of emitSOurceMaps, scalajsOptimizer,...
    // emitSourceMaps in fullOptJS := true,

    useYarn := true, // instead of npm
    npmDevDependencies in Compile ++= (
      "compression-webpack-plugin" -> "0.3.1" ::
      "brotli-webpack-plugin" -> "0.2.0" ::
      "webpack-closure-compiler" -> "2.1.4" ::
      Nil
    ),
    webpackConfigFile in fullOptJS := Some(baseDirectory.value / "webpack.config.prod.js"),

    // Devserver and hot-reload configuration:
    webpackConfigFile in fastOptJS := Some(baseDirectory.value / "webpack.config.dev.js"),
    webpackBundlingMode in fastOptJS := BundlingMode.LibraryOnly(), // https://scalacenter.github.io/scalajs-bundler/cookbook.html#performance
    webpackDevServerPort := 12345,
    webpackDevServerExtraArgs := Seq("--progress", "--color"),
    // when running the "dev" alias, after every fastOptJS compile all artifacts are copied into
    // a folder which is served and watched by the webpack devserver.
    // this is a workaround for: https://github.com/scalacenter/scalajs-bundler/issues/180
    copyFastOptJS := {
      val inDir = (crossTarget in (Compile, fastOptJS)).value
      val outDir = (crossTarget in (Compile, fastOptJS)).value / "fastopt"
      val files = Seq("frontend-fastopt-loader.js", "frontend-fastopt.js", "frontend-fastopt.js.map") map { p => (inDir / p, outDir / p) }
      IO.copy(files, overwrite = true, preserveLastModified = true, preserveExecutable = true)
    }
  )

lazy val slackApp = project
  .settings(commonSettings)
  .dependsOn(frameworkJVM, apiJVM, utilJVM)
  .settings(
    libraryDependencies ++=
      "cool.graph" % "cuid-java" % "0.1.1" ::
      derive ::
      "com.github.gilbertw1" %% "slack-scala-client" % "0.2.2" ::
      Nil
  )

lazy val assets = project
  .enablePlugins(SbtWeb, ScalaJSWeb, WebScalaJSBundlerPlugin)
  .settings(
    //TODO: https://github.com/jantimon/html-webpack-plugin for asset checksums
    //TODO: minify html
    resourceGenerators in Assets += Def.task {
      val file = (resourceManaged in Assets).value / "version.txt"
      IO.write(file, version.value)
      Seq(file)
    },
    unmanagedResourceDirectories in Assets ++= (
      baseDirectory.value / "public" ::
      baseDirectory.value / "prod" ::
      Nil
    ),
    scalaJSProjects := Seq(frontend),
    npmAssets ++= {
      // without dependsOn, the file list is generated before webpack does its thing.
      // Which would mean that generated files by webpack do not land in the pipeline.
      val assets =
        ((npmUpdate in Compile in frontend).dependsOn(webpack in fullOptJS in Compile in frontend).value ** "*.gz") +++
          ((npmUpdate in Compile in frontend).dependsOn(webpack in fullOptJS in Compile in frontend).value ** "*.br")
      val nodeModules = (npmUpdate in (frontend, Compile)).value
      assets.pair(Path.relativeTo(nodeModules))
    },
    pipelineStages in Assets := Seq(scalaJSPipeline)
  )

lazy val systemTest = project
  .configs(IntegrationTest)
  .settings(Defaults.itSettings)
  .settings(commonSettings)
  .settings(
    libraryDependencies ++=
      "com.typesafe.akka" %% "akka-http" % akkaHttpVersion % "it" ::
      "com.typesafe.akka" %% "akka-actor" % akkaVersion % "it" ::
      "org.specs2" %% "specs2-core" % specs2Version % "it" ::
      "org.seleniumhq.selenium" % "selenium-java" % "3.3.1" % "it" ::
      Nil,
    scalacOptions in Test ++= Seq("-Yrangepos") // specs2
  )

lazy val nginx = project
lazy val dbMigration = project
