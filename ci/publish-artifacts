#!/usr/bin/env bash

set -e

# variables
environment=${1:-production}
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
DOCKER_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.eu-central-1.amazonaws.com
S3_BUCKET_WEB_ASSETS="woost-${environment}-web-assets-repository"
web_assets_dir="./webApp/target/scala-2.12/scalajs-bundler/main/dist"
version=${WUST_VERSION:-latest}

# Copy web assets to repository bucket, so we can access this version in deployment
#TODO TEMPORARY: get sw.<hash>.js and copy to sw.js. we want to serve it under this name as well for some time so old client with old update-mechanism still upgrade automatically
cp $web_assets_dir/sw.*.js $web_assets_dir/sw.js
short_caching_assets=(index.html staging.html error-404.html sw.js)
# We copy with metadata that is the caching header. cache all assets except short-caching for 1 year
aws s3 sync $(printf " --exclude %s" "${short_caching_assets[@]}") "$web_assets_dir" "s3://$S3_BUCKET_WEB_ASSETS/$version/" --metadata-directive REPLACE --cache-control max-age=31536000
for $asset in $short_caching_assets; do
    # short caching asset are only cached for a minute
    s3_path="s3://$S3_BUCKET_WEB_ASSETS/$version/$asset"
    aws s3 cp $web_assets_dir/$asset $s3_path --metadata-directive REPLACE --cache-control max-age=60
done


# publish docker images to our registry
eval $(aws ecr get-login --no-include-email)
function docker_push() {
    local image="$1"
    local version="$2"
    local source_image="$image:$version"
    local target_image="$DOCKER_REGISTRY/$image:$version"

    docker tag $source_image $target_image
    docker push $target_image
}
docker_push "woost/db-migration" "$version-core"
docker_push "woost/core" "$version"
