#!/usr/bin/env bash
set -e
set -o pipefail

script_dir="$(dirname $0)"

function docker_compose() {
    project="$1"
    stage="$2"
    add_args=""
    if [[ -n "$stage" ]] && [[ -f "$project/docker-compose.$stage.yml" ]]; then
        add_args="-f $project/docker-compose.$stage.yml"
    fi

    set +e
    output=$(docker-compose -p "$stage$project" -f $project/docker-compose.yml $add_args ${@:3} 2>&1 | tee /dev/tty )
    err=$?
    set -e

    if [[ -n "$(echo $output | grep -E 'manifest for woost/db-migration:[^ ]* not found')" ]]; then
        echo "Cannot find db-migration image, rebuilding..."
        sbt dbMigration/docker
        docker_compose $@
    elif [[ -n "$(echo $output | grep -E 'manifest for woost/[^ ]* not found')" ]]; then
        echo "Cannot find some docker image, rebuilding all images..."
        sbt docker
        docker_compose $@
    elif [[ $err -ne 0 ]]; then
        echo "docker-compose failed, exiting"
        exit 1
    fi
}
function postgres_nottycommand() {
    docker exec -i "devcore_postgres_1" "$@"
}
function postgres_command() {
    docker exec -it "devcore_postgres_1" "$@"
}
override_sbt_args="${@:2}" # all remaining arguments starting at 2
function sbt_with_args() {
    args="${@:1}"
    [ -n "$override_sbt_args" ] && args="$override_sbt_args"

    sbt $args
}
function sbt() {
    command sbt -Dquill.macro.log=false $EXTRASBTARGS $@
}

dockerhost_ip=`ip -4 addr show scope global dev docker0 | grep inet | awk '{print \$2}' | cut -d / -f 1`

FALLBACKVERSION="dirty" # When git is not available
[ -n "$TRAVIS_BRANCH" ] && VERSION=$TRAVIS_BRANCH || VERSION=`git rev-parse --abbrev-ref HEAD` || VERSION=$FALLBACKVERSION
[ $VERSION == "master" ] && VERSION="latest"


# TODO: if database docker image is not found, automatically do a migration
env_wust_version="WUST_VERSION=$VERSION"
env_wust_secret="WUST_AUTH_SECRET=secret WUST_USER=wust WUST_PASSWORD=wust WUST_PUSH_SUBJECT=test@woost.space WUST_PUSH_PUBLIC_KEY=BDP21xA+AA6MyDK30zySyHYf78CimGpsv6svUm0dJaRgAjonSDeTlmE111Vj84jRdTKcLojrr5NtMlthXkpY+q0 WUST_PUSH_PRIVATE_KEY=or76yI5iDE+S9gWkVU2g0JuHyq4OD/AtwHTHefkoo3k"
env_wust_local="WUST_HOSTNAME=localhost DEV_DOCKERHOST_IP=$dockerhost_ip DOCKER_RESTART_POLICY=no"
env_postgres_secret="POSTGRES_PASSWORD=test"
env_postgres_local="POSTGRES_HOSTNAME=localhost POSTGRES_USER=wust POSTGRES_DB=wust POSTGRES_PORT_CORE=5433"
env_redis_local="REDIS_HOSTNAME=localhost REDIS_PORT_GITHUB=6380"

env_wust_local_connectivity="WUST_PORT=${WUST_PORT:-12345} WUST_WEB_PORT=${WUST_WEB_PORT:-8900}  WUST_CORE_PORT=${WUST_CORE_PORT:-8901} WUST_GITHUB_PORT=${WUST_GITHUB_PORT:-8902} DEV_SERVER_COMPRESS=${DEV_SERVER_COMPRESS:-false}"

if [[ -f tokens.sh ]]; then
    source tokens.sh
fi

function self() {
    case "$1" in
    migrateStudy) # TODO: Julius: remove
        # Cleanup
        env="$env_postgres_secret $env_wust_secret $env_postgres_local $env_redis_local $env_wust_local $env_wust_local_connectivity"
        echo -e "- ENV: \e[1m\e[32m$env\e[0m"
        export $env
        docker_compose core dev up -d
        postgres_command psql -h localhost -U wust -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"

        # Migrate
        sbt dbMigration/docker
        docker_compose core dev run db-migration
        postgres_nottycommand psql --single-transaction --set ON_ERROR_STOP=on -h localhost -U wust --file=- < taskStudyData/kalte-dusche-ordered_f1.sql

        docker stop devcore_core_1
        ;;
    taskStudy) # TODO: Julius: remove
        # Cleanup
        env="$env_postgres_secret $env_wust_secret $env_postgres_local $env_redis_local $env_wust_local $env_wust_local_connectivity"
        echo -e "- ENV: \e[1m\e[32m$env\e[0m"
        export $env
        docker_compose core dev up -d
        postgres_command psql -h localhost -U wust -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"

        # Migrate
        sbt dbMigration/docker
        docker_compose core dev run db-migration
        postgres_nottycommand psql --single-transaction --set ON_ERROR_STOP=on -h localhost -U wust --file=- < taskStudyData/kalte-dusche.sql

        # Start
        echo "DO NOT FORGET TO PERSIST LOGS"
        docker_compose core dev up -d db-migration
        (firefox --new-window "http://localhost:12345/#chat") &
        sbt_with_args devf
        ;;
    psql)
        export $env_postgres_secret $env_postgres_local
        PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOSTNAME -U $POSTGRES_USER -p $POSTGRES_PORT_CORE ${@:2}
        # postgres_command psql -h localhost -U $POSTGRES_USER ${@:2}
        ;;
    pgdump)
        postgres_command pg_dump --clean -h localhost -U wust > $(date +"%F-%H-%M-%S-dev-postgres-backup.sql")
        ;;
    pgrestore)
        postgres_nottycommand psql --single-transaction --set ON_ERROR_STOP=on -h localhost -U wust --file=- < $2
        ;;
    pgclean)
        postgres_command psql -h localhost -U wust -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
        ;;
    sbtWithPoll)
        # Only exports polling parameter and then falls through!
        export "EXTRASBTARGS=$EXTRASBTARGS -Dsbt.watch.mode=polling"
        ;&
    sbt)
        env="$env_wust_version $env_postgres_secret $env_wust_secret $env_postgres_local $env_redis_local $env_wust_local $env_wust_local_connectivity"
        echo -e "- ENV: \e[1m\e[32m$env\e[0m"
        export $env

        case "$2" in
        all)
            docker_compose core dev up -d db-migration
            docker_compose githubApp dev up -d redis
            ;;
        core)
            docker_compose core dev up -d db-migration
            ;;
        githubApp)
            docker_compose githubApp dev up -d redis
            ;;
        gitterApp)
            ;;
        slackApp)
            ;;
        *)
            docker_compose core dev up -d db-migration
            ;;
        esac

        set +e # after sbt crash or termination, still shut down docker containers
        sbt
        docker_compose core dev down
        ;;
    apps)
        env="$env_wust_version $env_postgres_secret $env_wust_secret $env_postgres_local $env_redis_local $env_wust_local $env_wust_local_connectivity"
        echo -e "- ENV: \e[1m\e[32m$env\e[0m"
        export $env
        if [[ -z "$2" ]]; then
            docker_compose githubApp dev up -d
            docker_compose webApp dev up -d
        else
            docker_compose "$2" dev up -d
        fi
        ;;
    env)
        echo "export $env_wust_version $env_postgres_secret $env_wust_secret $env_postgres_local $env_redis_local $env_wust_local $env_wust_local_connectivity"
        ;;
    migrate)
        export $env_wust_version $env_postgres_secret $env_wust_local_connectivity
        sbt dbMigration/docker # TODO: avoid sbt launch, this makes CI, remotedev and everything faster
        docker_compose core dev run db-migration
        ;;
    prodlocal)
        env="$env_wust_version $env_postgres_secret $env_wust_secret $env_postgres_local $env_redis_local $env_wust_local $env_wust_local_connectivity"
        echo -e "- ENV: \e[1m\e[32m$env\e[0m"
        export $env
        sbt webApp/clean docker
        docker_compose webApp dev up -d
        docker_compose core dev up -d db-migration
        sbt dev
        # then open: (slash in the end is important)
        # http://localhost:12345/apps/web/ 
        ;;
    test)
        sbt docker
        sbt_with_args test
        self test.postgres
        self test.integration
        ;;
    test.postgres)
        docker_compose core test.postgres down -v
        export $env_wust_version $env_wust_local_connectivity
        docker_compose core test.postgres run db-migration
        docker_compose core test.postgres run test-postgres
        docker_compose core test.postgres down -v
        ;;
    test.integration)
        export $env_wust_version $env_postgres_secret $env_wust_secret $env_postgres_local $env_redis_local $env_wust_local_connectivity
        docker_compose core dev up -d
        docker_compose webApp dev up -d
        docker_compose core dev run db-migration
        postgres_command psql -U postgres --command="DROP DATABASE IF EXISTS wust_template"
        postgres_command psql -U postgres --command="CREATE DATABASE wust_template TEMPLATE wust"
        # sbt_with_args coverage it:test coverageReport
        sbt_with_args it:test
        docker_compose core dev down -v
        ;;
    *)
        cat <<EOF
    unknown option '$1', expected one of:

    taskStudy

    sbt
    apps
    env
    migrate

    psql [options]
    pgdump
    pgrestore file
    pgclean

    test
    test.postgres
    test.integration
EOF
        exit 1

    esac
}

self $@
