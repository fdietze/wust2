#!/usr/bin/env bash
set -e
set -o pipefail

script_dir="$(dirname $0)"

function on_stage() { stage="$1"; }

override_sbt_args="${@:2}" # all remaining arguments starting at 2
function sbt_with_args() {
    args="${@:1}"
    [ -n "$override_sbt_args" ] && args="$override_sbt_args"

    sbt -Dquill.macro.log=false $args
}

function compose() { "$script_dir/docker/compose" $stage $@; }

function postgres_command() {
    name=$(echo $stage | tr -d ".")
    docker exec -it "wust${name}_postgres_1" "$@"
}

env_wust_secret="WUST_AUTH_SECRET=secret"
env_wust_local="WUST_HOSTNAME=localhost WUST_USER=wust WUST_PASSWORD=wust"
env_postgres_secret="POSTGRES_PASSWORD=test"
env_postgres_local="POSTGRES_HOSTNAME=localhost POSTGRES_USER=wust POSTGRES_DB=wust"

function self() {
    case "$1" in
    psql)
        on_stage dev
        # compose run db-migration
        # PGPASSWORD=test psql -h localhost -U wust
        docker exec -it wustdev_postgres_1 psql -h localhost -U wust ${@:2}
        ;;
    pgdump)
        on_stage dev
        postgres_command pg_dump --clean -h localhost -U wust > $(date +"%F-%H-%M-%S-dev-postgres-backup.sql")
        ;;
    pgrestore)
        on_stage dev
        postgres_command psql --single-transaction --set ON_ERROR_STOP=on -h localhost -U wust --file=- < $2
        ;;
    pgclean)
        on_stage dev
        postgres_command psql -h localhost -U wust -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
        ;;
    sbt)
        on_stage dev
        export $env_postgres_secret $env_wust_secret $env_postgres_local $env_wust_local
        compose up -d
        sbt_with_args
        ;;
    migrate)
        on_stage dev
        export $env_postgres_secret
        CI=true sbt dbMigration/docker
        compose run db-migration
        ;;
    prod)
        on_stage prod
        export $env_postgres_secret $env_wust_secret
        compose down
        compose up -d nginx
        ;;
    prod.http)
        on_stage prod
        export $env_postgres_secret $env_wust_secret
        compose down
        compose up -d nginx-http
        ;;
    prod.slack)
        on_stage prod
        export $env_postgres_secret $env_wust_secret
        compose down
        compose up -d slack-app
        ;;
    test)
        sbt docker
        sbt_with_args test
        self test.postgres
        self test.integration
        ;;
    test.postgres)
        on_stage test.postgres
        compose down
        compose run db-migration
        compose run test
        compose down
        ;;
    test.integration)
        on_stage test.integration
        # POSTGRES_POST 5431 for travis, as default port 5432 is already in use
        export $env_postgres_secret $env_wust_secret $env_postgres_local POSTGRES_PORT=5431
        compose rm -f -v
        compose up -d --force-recreate
        compose run db-migration
        postgres_command psql -U postgres --command="DROP DATABASE IF EXISTS wust_template"
        postgres_command psql -U postgres --command="CREATE DATABASE wust_template TEMPLATE wust"
        CI=true sbt_with_args coverage it:test coverageReport
        compose down
        ;;
    *)
        cat <<EOF
    unknown option '$1', expected one of:

    sbt
    migrate

    psql [options]
    pgdump
    pgrestore file
    pgclean

    prod
    prod.http
    prod.slack

    test
    test.postgres
    test.integration
EOF
        exit 1

    esac
}

self "$1"
