#!/usr/bin/env bash
set -e
set -o pipefail

if [ "$name" != "Woost" -a "$1" != "nsbt" -a "$1" != "graal" ]; then 
  echo -e "\e[33m######### YOU HAVE NOT STARTED NIX-SHELL #########\e[0m"
fi;

script_dir="$(dirname $0)"
sql_checksum_file="$script_dir/.sql_checksum"
sql_checksum_dir="$script_dir/dbMigration/core/"

git_branch=$(git symbolic-ref --short HEAD --quiet || git rev-parse HEAD) # branch, or fall back to commit hash

function assure_db_migration() {
    if [ -z "$CI" ]; then
        new_checksum="$(find $sql_checksum_dir -type f -exec md5sum {} \; | sort -k 2 | { cat; echo $git_branch; } | md5sum)"
        old_checksum="$(cat $sql_checksum_file 2> /dev/null || true)"
        if [ "$old_checksum" != "$new_checksum" ]; then
            echo "New db migration available, building db-migration image"
            sbt dbMigration/docker
            echo "$new_checksum" > $sql_checksum_file
        fi
    fi
}

function docker_compose() {
    project="$1"
    stage="$2"
    add_args=""
    if [[ -n "$stage" ]] && [[ -f "$project/docker-compose.$stage.yml" ]]; then
        add_args="-f $project/docker-compose.$stage.yml"
    fi

    docker-compose -p "$stage$project" -f $project/docker-compose.yml $add_args "${@:3}"
}
function postgres_core_command() {
    docker_compose core dev exec -T postgres "$@"
}
function postgres_slack_command() {
    docker_compose slackApp dev exec -T postgres "$@"
}
function postgres_core_psqlbatch() {
    # Worth reading: https://petereisentraut.blogspot.com/2010/03/running-sql-scripts-with-psql.html
    # https://www.postgresql.org/docs/current/runtime-config-logging.html#GUC-CLIENT-MIN-MESSAGES
    PGOPTIONS='--client-min-messages=warning' postgres_core_command psql --no-psqlrc --quiet --pset pager=off --set ON_ERROR_STOP=1 --single-transaction "$@"
}
function postgres_core_psqlbatch_without_transaction() {
    # Worth reading: https://petereisentraut.blogspot.com/2010/03/running-sql-scripts-with-psql.html
    # https://www.postgresql.org/docs/current/runtime-config-logging.html#GUC-CLIENT-MIN-MESSAGES
    PGOPTIONS='--client-min-messages=warning' postgres_core_command psql --no-psqlrc --quiet --pset pager=off --set ON_ERROR_STOP=1 "$@"
}
function postgres_slack_psqlbatch() {
    # Worth reading: https://petereisentraut.blogspot.com/2010/03/running-sql-scripts-with-psql.html
    # https://www.postgresql.org/docs/current/runtime-config-logging.html#GUC-CLIENT-MIN-MESSAGES
    PGOPTIONS='--client-min-messages=warning' postgres_slack_command psql --no-psqlrc --quiet --pset pager=off --set ON_ERROR_STOP=1 --single-transaction "$@"
}
override_sbt_args="${@:2}" # all remaining arguments starting at 2
function sbt_with_args() {
    args="${@:1}"
    [ -n "$override_sbt_args" ] && args="$override_sbt_args"

    sbt $args
}
function sbt() {
    command sbt -Dquill.macro.log=${LOGQUILL:-false} $EXTRASBTARGS $@
}


# TODO: if database docker image is not found, automatically do a migration
env_wust_secret="WUST_AUTH_SECRET=secret WUST_USER=wust WUST_PASSWORD=wust WUST_WEB_PUSH_SUBJECT=push.dev@woost.space WUST_WEB_PUSH_PUBLIC_KEY=BDP21xA+AA6MyDK30zySyHYf78CimGpsv6svUm0dJaRgAjonSDeTlmE111Vj84jRdTKcLojrr5NtMlthXkpY+q0 WUST_WEB_PUSH_PRIVATE_KEY=or76yI5iDE+S9gWkVU2g0JuHyq4OD/AtwHTHefkoo3k"
env_wust_local="WUST_HOSTNAME=localhost DOCKER_RESTART_POLICY=no"
env_postgres_secret="POSTGRES_PASSWORD=test"
env_postgres_local="POSTGRES_HOSTNAME=localhost POSTGRES_USER=wust POSTGRES_DB=wust POSTGRES_PORT=5432"

env_github_redis="REDIS_HOSTNAME=localhost REDIS_PORT_GITHUB=6379"
env_github_app="WUST_GITHUB_PORT=${WUST_GITHUB_PORT:-8902} "
env_github="$env_github_redis $env_github_app"

env_slack_postgres="SLACK_POSTGRES_HOSTNAME=localhost SLACK_POSTGRES_USER=wust-slack SLACK_POSTGRES_DB=wust-slack SLACK_POSTGRES_PORT=15432 SLACK_POSTGRES_PASSWORD=test"
env_slack_app="WUST_SLACK_PORT=${WUST_SLACK_PORT:-9103} WUST_SLACK_USER=wust-slack WUST_SLACK_PASSWORD=wust-slack"
env_slack="$env_slack_postgres $env_slack_app"

env_wust_local_connectivity="WUST_PORT=${WUST_PORT:-12345} WUST_WEB_PORT=${WUST_WEB_PORT:-8900}  WUST_CORE_PORT=${WUST_CORE_PORT:-8901} DEV_SERVER_COMPRESS=${DEV_SERVER_COMPRESS:-false} SOURCEMAPS=${SOURCEMAPS:-false} $env_github_app $env_slack_app"

if [[ -f tokens.sh ]]; then
    source tokens.sh
fi

function self() {
    case "$1" in
    psql)
        export $env_postgres_secret $env_postgres_local
        PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOSTNAME -U $POSTGRES_USER -p $POSTGRES_PORT ${@:2}
        # postgres_core_command psql -h localhost -U $POSTGRES_USER ${@:2}
        ;;
    pgcli)
        export $env_postgres_secret $env_postgres_local

        case "$2" in
        core)
            PGPASSWORD=$POSTGRES_PASSWORD pgcli -h $POSTGRES_HOSTNAME -U $POSTGRES_USER -p ${2:-$POSTGRES_PORT } ${@:3}
            ;;
        githubApp)
            ;;
        gitterApp)
            ;;
        slackApp)
            export $env_slack
            PGPASSWORD=$SLACK_POSTGRES_PASSWORD pgcli -h $SLACK_POSTGRES_HOSTNAME -U $SLACK_POSTGRES_USER -p $SLACK_POSTGRES_PORT ${@:3}
            ;;
        *)
            PGPASSWORD=$POSTGRES_PASSWORD pgcli -h $POSTGRES_HOSTNAME -U $POSTGRES_USER -p ${2:-$POSTGRES_PORT } ${@:3}
            ;;
        esac
        ;;
    pgdump)
        filepath=${2-`date +"%F-%H-%M-%S-dev-postgres-backup.sql"`}
        postgres_core_command pg_dump --clean --if-exists -h localhost -U wust > "$filepath"
        ;;
    pgrestore)
        postgres_core_psqlbatch -h localhost -U wust -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
        postgres_core_psqlbatch -h localhost -U wust --file=- <$2
        ;;
    pgclean)
        export $env_postgres_secret $env_postgres_local

        case "$2" in
        all)
            postgres_core_psqlbatch -h localhost -U $POSTGRES_USER -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
            export $env_slack_postgres
            postgres_slack_psqlbatch -h localhost -U $SLACK_POSTGRES_USER  -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
            ;;
        core)
            postgres_core_psqlbatch -h localhost -U $POSTGRES_USER -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
            ;;
        githubApp)
            ;;
        gitterApp)
            ;;
        slackApp)
            export $env_slack_postgres
            postgres_slack_psqlbatch -h localhost -U $SLACK_POSTGRES_USER  -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
            ;;
        *)
            postgres_core_psqlbatch -h localhost -U $POSTGRES_USER -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
            ;;
        esac
        ;;
    sbtWithPoll)
        # Only exports polling parameter and then falls through!
        export "EXTRASBTARGS=$EXTRASBTARGS -Dsbt.watch.mode=polling"
        ;;
    nsbt)
        nix-shell production.nix --run "./start sbt ${@:2}"
        ;;
    graal)
        nix-shell -p graalvm8 --run "export JAVA_HOME=\"\$(dirname \$(dirname \$(which java)))\"; echo JAVA_HOME=\$JAVA_HOME; java -version; $SHELL"
        ;;
    sbt)
        env="$env_postgres_secret $env_wust_secret $env_postgres_local $env_wust_local $env_wust_local_connectivity $env_github $env_slack"
        echo -e "\e[1m\e[32m$env\e[0m"
        export $env

        assure_db_migration
        SBT_ARGS=""
        case "$2" in
        all)
            docker_compose core dev up -d db-migration
            docker_compose slackApp dev up -d db-migration
            docker_compose githubApp dev up -d redis
            ;;
        core)
            docker_compose core dev up -d db-migration
            ;;
        githubApp)
            docker_compose githubApp dev up -d redis
            ;;
        gitterApp)
            ;;
        slackApp)
            docker_compose slackApp dev up -d db-migration
            ;;
        *)
            SBT_ARGS=${@:2}
            docker_compose core dev up -d db-migration
            ;;
        esac

        set +e # after sbt crash or termination, still shut down docker containers
        java -version
        if [[ -n $JAVA_HOME ]]; then
            sbt -java-home $JAVA_HOME $SBT_ARGS
        else
            sbt $SBT_ARGS
        fi
        docker_compose core dev down
        ;;
    apps)
        env="$env_postgres_secret $env_wust_secret $env_postgres_local $env_wust_local $env_wust_local_connectivity $env_github $env_slack"
        echo -e "- ENV: \e[1m\e[32m$env\e[0m"
        export $env

        assure_db_migration

        if [[ -z "$2" ]]; then
            docker_compose githubApp dev up -d
            docker_compose slackApp dev up -d
            docker_compose webApp dev up -d
        else
            docker_compose "$2" dev up -d
        fi
        ;;
    env)
        echo "export $env_postgres_secret $env_wust_secret $env_postgres_local $env_wust_local $env_wust_local_connectivity $env_github $env_slack"
        ;;
    migrate)
        export $env_postgres_secret $env_wust_local_connectivity

        assure_db_migration

        case "$2" in
        all)
            docker_compose core dev run db-migration
            export $env_github_postgres
            docker_compose github dev run db-migration
            export $env_gitter_postgres
            docker_compose gitter dev run db-migration
            export $env_slack_postgres
            docker_compose slack dev run db-migration
            ;;
        core)
            docker_compose core dev run db-migration
            ;;
        githubApp)
            export $env_github_postgres
            docker_compose githubApp dev run db-migration
            ;;
        gitterApp)
            export $env_gitter_postgres
            docker_compose gitterApp dev run db-migration
            ;;
        slackApp)
            export $env_slack_postgres
            docker_compose slackApp dev run db-migration
            ;;
        *)
            docker_compose core dev run db-migration
            ;;
        esac
        ;;
    prodlocal)
        #TODO: instead of export, use in sbt command: set webpackExtraArgs in (fullOptJS in webApp) := \"--env\" :: \"WUST_PROD_DEVELOPMENT=true\" :: Nil; 
        env="$env_postgres_secret $env_wust_secret $env_postgres_local $env_wust_local $env_wust_local_connectivity $env_github $env_slack"
        echo -e "\e[1m\e[32m$env\e[0m"
        export $env WUST_PROD_DEVELOPMENT=true
        sbt prodlocal
        ;;
    test)
        sbt docker
        sbt_with_args test
        self test.postgres
        self test.integration
        ;;
    test.postgres)
        assure_db_migration
        docker_compose core test.postgres down -v
        export $env_wust_local_connectivity
        docker_compose core test.postgres run db-migration
        docker_compose core test.postgres run test-postgres
        docker_compose core test.postgres down -v
        ;;
    test.integration)
        export $env_postgres_secret $env_wust_secret $env_postgres_local $env_github $env_wust_local_connectivity $env_slack
        docker_compose core dev down
        docker_compose core dev up -d --no-recreate
        docker_compose webApp dev up -d
        docker_compose core dev run db-migration
        postgres_core_psqlbatch_without_transaction -U $POSTGRES_USER --command="DROP DATABASE IF EXISTS wust_template"
        postgres_core_psqlbatch_without_transaction -U $POSTGRES_USER --command="CREATE DATABASE wust_template TEMPLATE wust"
        # sbt_with_args coverage it:test coverageReport
        sbt_with_args it:test
        docker_compose core dev down -v
        ;;
    *)
        cat <<EOF
    unknown option '$1', expected one of:

    sbt [ all | core | githubApp | gitterApp | slackApp | * ]
    sbtWithPoll # Activate watch mode
    nsbt        # Start sbt in a nix-shell

    psql [options]
    pgcli [options]
    pgdump
    pgrestore [file]
    pgclean

    apps
    env
    migrate

    prodlocal

    test
    test.postgres
    test.integration

EOF
        exit 1

    esac
}

self $@
